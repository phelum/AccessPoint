#!/bin/bash

#   This monitors our network interfaces and starts the access
#   point interface if found.  If no such device the downstream
#   interface is started.

#   LINK_IFACES is the list of possible upstream interfaces for hap4mb.
#   These should be set with no auto or allow-hotplug and
#   the pre-up, post-up, and post-down stanzas included.

#   WIFI_IFACE is our downstream interface and also how we connect
#   to a network when not in access point mode.  The iface
#   details must be setup as below so we can use ifup which
#   fires up wpa_supplicant as required.

#   The /etc/rc.local patch to start this monitor is:
#   setsid -f /usr/local/bin/mon4hap > /var/log/mon.log

#   /etc/network/interfaces must contain an iface called manual
#   that is "inet manual" and specifies the "wpa-conf", e.g.
#   iface manual inet manual
#   wpa-conf    /wpa/all.conf

#   To minimise startup time the wifi interface should be:
#   allow-hotplug
#   iface <wifi name> inet manual
#   wpa-conf <desired conf file>

    #   defaults.

    WIFI_IFACE="wifi"
    MANUAL_IFACE="manual"
    LINK_IFACES="usb0"
    NET_DIR="/sys/class/net"
    IFSTATE_FILE="/var/run/network/ifstate"
    SLEEP_TIME=10

    #   get configuration.

    OUR_PATH="${0%\/*}"
    [ "${OUR_PATH:0:1}" = "." ] && OUR_PATH="$(pwd)${OUR_PATH:1}"
    source ${OUR_PATH}/mon4hap.conf || { echo "reqd file missing"; exit 1; }

    #   loop for monitoring.

    while [ -e ${NET_DIR}/${WIFI_IFACE} ] ; do

        #   The link interfaces only appear when the device is
        #   detected and processed by a udev rule.

      LINK_IFACE=${WIFI_IFACE}
      for WORD in ${LINK_IFACES} ; do
        [ -e ${NET_DIR}/${WORD} ] && LINK_IFACE=${WORD} && break
      done

        #   if LINK_IFACE = WIFI_IFACE, no devices have been found.

      if [ "${LINK_IFACE}" = "${WIFI_IFACE}" ] ; then

        #   if wifi down, try ifup.  If we do the up we do a short
        #   sleep then continue so we can do dhclient sooner.

        ifconfig ${LINK_IFACE} | grep 'flags=' | grep -qw 'UP'  || \
        { ifup ${LINK_IFACE}=${MANUAL_IFACE}; sleep 1; continue; }

        #   if carrier but no IPv4 address, try dhclient.
        #   can't use "testA && testB || action" because action will be
        #   done even when testA fails.  So testA has to be a discrete if.

        if [ "$(cat ${NET_DIR}/${LINK_IFACE}/carrier)" = "1" ] ; then
          ifconfig ${LINK_IFACE} | grep -qw 'inet' || \
          { ps ax | grep -E "dhclient +${LINK_IFACE}" || dhclient ${LINK_IFACE}; }
        fi

        #   The weird "grep -E" above is so the result doesn't contain the
        #   grep command.  It will only contain the "dhclient ????" line
        #   if found.  Searching for a plain literal always succeeds because
        #   grep finds its own job line containing the literal.

      else

        #   We've found an upstream interface.
        #   If not up, try ifup.  ifup fails if it thinks the interface
        #   is already configured so we clobber its status file which
        #   can still contain data if the device existed and was removed.
        #   If the file is missing, ifup has never been done since run start.
        #   If the file contains the interface name, ifup (only) has been done.
        #   If the file contains LF only, then ifdown has been done after ifup.

        [ -e ${NET_DIR}/${LINK_IFACE} ] && \
        [ "$(cat ${NET_DIR}/${LINK_IFACE}/operstate)" = "down" ] && \
        { echo "" > ${IFSTATE_FILE}.${LINK_IFACE}; ifup ${LINK_IFACE}; }

      fi

      sleep ${SLEEP_TIME}

    done

    echo "Error: interface \"${WIFI_IFACE}\" doesn't exist"

    exit 1
