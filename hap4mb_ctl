#!/bin/bash

    #   This script is so Wi-Fi devices (via hostapd) can use the USB dongle to
    #   access the mobile broadband network.  The dongle has a DHCP server so we
    #   don't need dnsmasq or masquerade.  We do need the bridge enabled.
    #
    #   wpa_supplicant: handles Wi-Fi security so interface can connect to access point.
    #   hostapd: makes Wi-Fi interface an access point rather than a network client.
    #   hostapd: can connect to a bridge rather than just needing some other application
    #   to connect to the W-Fi interface.
    #   So, here we always want the bridge enabled so Wi-Fi clients can access the mobile
    #   broadband network.  Without the bridge they could access this host but that is all.
    #   dnsmasq: handles DHCP requests from Wi-Fi clients.  Without this these client
    #   requests will be sent to the local host if no bridge or sent via bridge to the
    #   mobile broadband interface.
    #   masquerade: nftables facility to change packet source IP address to that of
    #   the destination interface (e.g. mobile broadand interface).
    #
    #
    #       Modes (set in hap4mb.conf).
    #
    #   HAP_BRIDGE=x:
    #     Must be set to "1" unless you want to read the wifi interface locally.
    #
    #   HAP_DNSMASQ=x:
    #     Set to  "1" if you want a local DHCP server.
    #     You must also set WLAN_IPS.
    #
    #   HAP_MASQUERADE=x:
    #     Set to "1" if you want NAT using kernel routines.
    #     Kernel must have relevant functions available.
    #
    #   HAP_DEBUG=x:
    #     Set to "1" if you want extra details logged in hap4mb.log.
    #
    #   Major hassles trying to get this to work.  Loading the nftables is critical
    #   as is setting the default route.  This has been a pig of a thing to test.


    #   This the common end to this script.

function finish ()
  {
    ERC=$1

    echo "==== $0 end $(date +'%F %T')"
    sync

    exit $ERC
  }


    #   ==== Start here ====

    echo "==== $0 start $(date +'%F %T')"

    #   First we get our real path.

    OUR_PATH="${0%\/*}"
    [ "${OUR_PATH:0:1}" = "." ] && OUR_PATH="$(pwd)${OUR_PATH:1}"

    #   Load functions files.

    source ${OUR_PATH}/bash_ip4.sh  || { echo "reqd file missing"; finish 1; }
    source ${OUR_PATH}/hap4mb_funcs || { echo "reqd file missing"; finish 1; }

    #   Our configuration files.

    HAP_CONF="${OUR_PATH}/hap4mb.conf"
    source $(ExtractRelevantLines ${HAP_CONF} COMMON)     || finish 1
    source $(ExtractRelevantLines ${HAP_CONF} HAP4MB_CTL) || finish 1

    #   Debug/test specials.

    [ "$1" = "nft" ]     && { setup_nft; nft list ruleset; finish 0; }
    [ "$1" = "prefix" ]  && { echo $(IP4_mask2len $2); finish 0; }
    [ "$1" = "extr" ]    && { ExtractRelevantLines $2 $3; finish 0; }
    [ "$1" = "netmask" ] && { echo "$(IP4_cidr2mask ${WLAN_IPS})"; finish 0; }
    [ "$1" = "link" ]    && { echo "mac = $(get_link_mac $2)"; finish 0; }

    #   Check our interfaces exist.

    [ -e /sys/class/net/${LINK_IFACE}/operstate ] || { echo "${LINK_IFACE} not found"; finish 1; }
    [ -e /sys/class/net/${WLAN_IFACE}/operstate ] || { echo "${WLAN_IFACE} not found"; finish 1; }

    #   Lock file checked at run end.

    echo "hap4md_ctl=${HAP_SCRIPT}" >> ${HAP_LOCK_FID}

    #   Get upstream link info, bail out if problems.

    check_link_iface ${LINK_IFACE}

    #   Ensure wlan is down.  This also clears the ip route table.

    WLAN_WAS_UP="0"
    ifquery --state ${WLAN_IFACE} > /dev/null && { WLAN_WAS_UP="1"; ifdown ${WLAN_IFACE}; }

    #   Save default route, load our replacement.

    OLD_DEFAULT_ROUTE=$(ip r | grep -w 'default')
    [ "${HAP_DEBUG}" = "1" ] && echo "Old default = ${OLD_DEFAULT_ROUTE}"
    ip route rep default dev ${LINK_IFACE} via ${LINK_ROUTER} onlink

    #   If bridge mode, enable it.  Sending via the bridge didn't work
    #   properly so we now sending directly to the upstream interface.
    #   Note that this route update is the same as that above.  This
    #   causes unexpected statistics because outward packets are listed
    #   under the link interface yet inward replies get listed under
    #   the bridge interface.

    [ "${HAP_BRIDGE}" = "1" ] && setup_bridge && \
    ip route rep default dev ${LINK_IFACE} via ${LINK_ROUTER} onlink

    #   If not using dnsmasq we change WLAN_IPS for use in the nftables.
    #   Also we delete the route entry for the link interface as this
    #   removal enables remote access to this station.

    if [ "${HAP_DNSMASQ}" != "1" ] ; then
      LEN="$(IP4_mask2len ${LINK_SUBNET_MASK})"
      CIDR="${LINK_ADDRESS}/${LEN}"
      FIRST="$(IP4_cidr2first ${CIDR})"
      WLAN_IPS="${FIRST}/${LEN}"
      ip route del ${WLAN_IPS}
    fi

    #   nftables helps with monitoring and masquerading.

    setup_nft

    if [ "${HAP_DEBUG}" = "1" ] ; then
      echo "setup routines done; routes now:"
      ip route show
    fi

    #   Create conf file for hostapd.

    HAP_HPD_CONF=$(mktemp)
    echo "interface=${WLAN_IFACE}"                  >  ${HAP_HPD_CONF}
    if [ "${HAP_BRIDGE}" = "1" ] ; then
      echo "bridge=${DHCP_IFACE}"                   >> ${HAP_HPD_CONF}
    fi
    echo "ssid=${WLAN_SSID}"                        >> ${HAP_HPD_CONF}
#   echo "wpa_passphrase=${WLAN_PASS}"              >> ${HAP_HPD_CONF}
    #   Tried this to see if it overcomes "AP-STA-POSSIBLE-PSK-MISMATCH"
    #   error that occurs sometimes.  Doesn't help but I guess it
    #   avoids having password in temporary file left on disk.
    echo "$(wpa_passphrase ${WLAN_SSID} ${WLAN_PASS} | \
          grep '[[:space:]]psk='                     | \
          sed -e 's/[[:space:]]*psk=/wpa_psk=/')"   >> ${HAP_HPD_CONF}
    cat $(ExtractRelevantLines ${HAP_CONF} HOSTAPD) >> ${HAP_HPD_CONF}
    sync

    #   Now do the AP session.  We want hairpin mode on the wlan
    #   in an attempt to get the bridge to echo layer 2 frames
    #   so we can do intra-lan NETBIOS stuff.  We wait here
    #   until hostapd finishes (probably killed).

    echo "---- hostapd start $(date +'%F %T')"
    hostapd ${HAP_HPD_CONF} &
    HOSTAPD_PID=$!
    echo "hostapd = ${HOSTAPD_PID}"
    echo "hostapd=${HOSTAPD_PID}" >> ${HAP_LOCK_FID}
#   hostapd_cli -a${OUR_PATH}/hap4mb_hook -B

    HAIRPIN_SET=0
    while ps ${HOSTAPD_PID} > /dev/null ; do

      sleep 1

      [ "${HAP_DNSMASQ}" = "1" ]                       && \
      [ "${DNSMASQ_PID}" = "" ]                        && \
      start_dnsmasq                                    && \
      echo "dnsmasq=${DNSMASQ_PID}" >> ${HAP_LOCK_FID} && \
      ip route rep ${WLAN_IPS} dev ${DHCP_IFACE} scope link

      [ "${HAP_BRIDGE}" = "1" ]                     && \
      [ "${HAIRPIN_SET}" = "0" ]                    && \
      bridge link set dev ${WLAN_IFACE} hairpin on  && \
      HAIRPIN_SET=1

    done

    echo "---- hostapd end $(date +'%F %T')"

    #   Kill dnsmasq and delete special route.

    if [ "${DNSMASQ_PID}" != "" ] ; then
      kill ${DNSMASQ_PID}
      ip route del ${WLAN_IPS} dev ${DHCP_IFACE}
    fi

    #   Delete our bridge.

    [ "${HAP_BRIDGE}" = "1" ] && delete_bridge

    #   Restore default route (might be invalid here).

    [ "${OLD_DEFAULT_ROUTE}" != "" ] && ip route rep ${OLD_DEFAULT_ROUTE}

    #   The up here might also load the default route.
    #   If the lock file is missing we don't restore wifi.

    [ -e ${HAP_LOCK_FID} ] && [ "${WLAN_WAS_UP}" = "1" ] && ifup ${WLAN_IFACE}

    #   Info if debug enabled.

    [ "${HAP_DEBUG}" = "1" ] && nft list ruleset

    finish 0
